" Kailean Courtney
set nocompatible  " be iMproved, required

" Load plugins
source ~/.vim/plugins.vim

" Setup leader shortcuts
source ~/.vim/leader.vim

" Define custom functions
source ~/.vim/functions.vim

" Define autocommands
source ~/.vim/autocmds.vim

" Setup OmniComplete
source ~/.vim/omnicmpl.vim

" Basic cosmetics
" enable 256 colors
set t_Co=256            
" and for base16 as well
let base16colorspace=256            

" Pick our colorscheme
set background=dark
colorscheme base16-monokai

" enable syntax processing
syntax enable           

" Disable tasting invisible parts of the paren rainbow
let g:rbpt_disabled_colors = ['black', 'brown']

" faster redraw
set ttyfast                     
" Allow backspacing over autoindent, line breaks, and start of insert action.
set backspace=indent,eol,start  

" Configure Vim to remember certain information between instances.
" '10 : Marks will be remembered for up to 10 previously edited files.
" "100 : Save up to 100 lines for each register.
" :20 : Save up to 20 lines of command-line history.
" % : Save and restore the buffer list.
" n... : Location to save the viminfo files.
set viminfo='10,\"100,:20,%,n~/.vim/viminfo

" Set the default language to use for spell checking.
setlocal spell spelllang=en_us

" Set an environment variable to indicate a vim shell
let $PS1 .= '[VS]'

set tabstop=4           " 4 space tab
set expandtab           " use spaces for tabs
set softtabstop=4       " 4 space tab
set shiftwidth=4
set modeline
set modelines=1
filetype indent on
set autoindent
" tab infront of a line inserts blanks according to shiftwidth
set smarttab
" Copy the structure of the existing lines indent when autoindenting a new line.
set copyindent

set number              " show line numbers
set showcmd             " show command in bottom bar
set cursorline          " highlight current line
set wildmenu
set nolazyredraw
set showmatch           " higlight matching parenthesis
set linebreak           " try not to split words across lines
    

" Instead of failing a command because of unsaved changes raise a dialogue asking if you wish to save changed files.
set confirm

" Enable special display options to show tabs and end-of-line characters within a non-GUI window. Tabs are represented using '>-' and  a sequence of '-'s that will fill out to match the proper width of a tab. End-of-line is represented by a dollar sign '$'. Displaying  tabs as '>-' and end-of-lines as '$'. Trailing white space is represented by '~'. Must be toggled by a mapping to ':set list!'.
set listchars=tab:>-,eol:$,trail:~,extends:>,precedes:<

" Searching
set ignorecase          " ignore case when searching
set incsearch           " search as characters are entered
set hlsearch            " highlight all matches
set smartcase           " Enable case-sensitive search when the search phrase contains capital letters.

" Folding 
set foldmethod=indent " fold based on indent level
set foldnestmax=10    " max 10 depth
set foldlevelstart=10 " start with fold level of 1
set foldenable          " don't fold files by default on open
nnoremap <space> za

" Movement Shortcuts
" All aboard the pain train
let g:hardtime_default_on = 0
let g:hardtime_allow_different_key = 1
let g:hardtime_showmsg = 1

" Move over lines visually
nnoremap j gj
nnoremap k gk
" Highlight last inserted text
nnoremap gV `[v`]

" Smart way to move btw. windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Syntastic Setup
" Run all checkers and aggrigate errors
let g:syntastic_aggregate_errors = 1
let g:syntastic_check_on_open=1

" JS
let g:syntastic_javascript_checkers=['jshint', 'jscs']

" CXX
let g:syntastic_cpp_checkers = [ 'cpplint' ]
let g:syntastic_cpp_cpplint_args = " --extensions cxx,h"

" ctrlp
" Nearest ancestor only if working directory is an ancestor of current file
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_root_markers = [ 'Gruntfile.js', 'gulpfile.js' ]
" ignore the bin directory
let g:ctrlp_custom_ignore = {
    \ 'dir' : 'bin$\|\.git$\|node_modules$',
    \}

" Vim pad
let g:pad#dir = "~/vim-notes/"

" Easy Align{{{
" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" Tmux
" allows cursor change in tmux mode
if exists('$TMUX') 
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif
    
" Backups dirs
set backup 
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp 
set backupskip=/tmp/*,/private/tmp/* 
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp 
set writebackup

" Powerline Setup
python from powerline.vim import setup as powerline_setup
python powerline_setup()
python del powerline_setup
